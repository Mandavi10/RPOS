var restroid = ""; function createAddOn() { var e = jquery_min_p("#txtaddoncode").val(), t = jquery_min_p("#txtaddonname").val(); jquery_min_p.ajax({ type: "POST", contentType: "application/json; charset=utf-8", url: "/Master/createAddOn", data: "{'code':'" + e + "','name':'" + t + "','restroid':'" + restroid + "'}", dataType: "json", async: !1, success: function (e) { if (console.log(e), "1" != e[0].result) return alert("ERROr"), !1; jquery_min_p("#popupsuccess").text("Added Successfully"), jquery_min_p("#savePopup").modal("show"), BindAddOnList() } }) } function CheckDuplicate() { var code = jquery_min_p("#txtaddoncode").val(), name = jquery_min_p("#txtaddonname").val(), restroId = jquery_min_p("#lblrestroid").text(); jquery_min_p.ajax({ type: "POST", contentType: "application/json; charset=utf-8", url: "/Master/CheckDuplicate", data: "{'code':'" + code + "','name':'" + name + "','restroid':'" + restroId + "'}", dataType: "json", async: !1, success: function (result) { var i = 0, jsondata = eval(result); result.length > 0 ? (result[0].code == code && (jquery_min_p("#txtaddoncode").val(""), jquery_min_p("#txtaddoncode").attr("placeholder", "Code Already Exist."), jquery_min_p("#txtaddoncode").addClass("validate")), result[0].name == name && (jquery_min_p("#txtaddonname").val(""), jquery_min_p("#txtaddonname").attr("placeholder", "Addons Name Already Exist."), jquery_min_p("#txtaddonname").addClass("validate"))) : (createAddOn(), jquery_min_p("#Addonspopup").modal("hide")) } }) } function validation() { var e = 0; return "" == jquery_min_p("#txtaddoncode").val() && (jquery_min_p("#txtaddoncode").addClass("validate"), e = 1), "" == jquery_min_p("#txtaddonname").val() && (jquery_min_p("#txtaddonname").addClass("validate"), e = 1), 1 != e } function RemoveClass() { "" != jquery_min_p("#txtaddoncode").val() && jquery_min_p("#txtaddoncode").removeClass("validate"), "" != jquery_min_p("#txtaddonname").val() && jquery_min_p("#txtaddonname").removeClass("validate") } function Reset() { jquery_min_p("#txtaddoncode").val(""), jquery_min_p("#txtaddonname").val(""), jquery_min_p("#txtaddoncode").removeClass("validate"), jquery_min_p("#txtaddonname").removeClass("validate") } function BindAddOnList() { jquery_min_p("#divaddons").html(""), jquery_min_p.ajax({ type: "POST", contentType: "application/json; charset=utf-8", url: "/Master/BindAddOnList", data: "{'restroid':'" + restroid + "'}", dataType: "json", async: !1, success: function (e) { var t = 0, n = e.length; t = n % 2 != 0 ? (n + 1) / 2 : n / 2; var d = "", a = 0, i = 0; d += "<table >", d += "<tbody id='tbladdonlist' >"; for (var r = 0; r < t; r++) { for (d += "<tr >", a = 0; a < 2; a++) d += "<td >", n > i && (d = (d = (d += " <input type='checkbox' name='value' value='other' id='checkAddon' class='chkAddon' />") + " <label class='ml-2 mb-0' id='test'>" + e[i].addonsname + "</label> ") + "<label class='ml-1' style='display:none' id='lbladdonsId'>" + e[i].addonsId + "</label>"), d += "</td>", i++; d += "</tr>" } d += "</table>", jquery_min_p("#divaddons").append(d), jquery_min_p("#preloader").css("display", "none"), jquery_min_p("#Overlay_Load").css("visibility", "hidden") }, beforesend: function () { jquery_min_p("#preloader").css("display", "block"), jquery_min_p("#Overlay_Load").css("visibility", "visible") }, error: function () { } }) } function BindItemWise() { jquery_min_p("#Itemtable tbody").html(""), jquery_min_p.ajax({ type: "POST", contentType: "application/json; charset=utf-8", url: "/Master/BindItemWise", data: "{'restroid':'" + restroid + "'}", dataType: "json", async: !1, success: function (e) { var t = 0, n = e.length, d = ""; for (t = 0; t < n; t++) d += "<tr>", d += "<td>", d += " <span class=''>", d += "<input type='checkbox' name='' value='other' id='checkitem' class='chk' onclick='DeselectAlldata(this);' />", d += "</span>", d = (d = (d = (d += "</td>") + " <td style='display:none'>" + e[t].itemId + "</td>") + " <td>" + e[t].itemname + "</td>") + "<td>" + e[t].AddonsQuantity + "</td>", d += "</tr>"; jquery_min_p("#Itemtable tbody").append(d) }, error: function () { } }) } function Deleteaddon() { var restroId = jquery_min_p("#lblrestroid").text(), TableDataX = "<dtXml>"; jquery_min_p("#divaddons .chkAddon").each(function (e) { if (1 == jquery_min_p(this).prop("checked")) { TableDataX += "<dtXml "; var t = $(this).closest("tr td").find("#lbladdonsId").text(); TableDataX += 'addonsId="' + t + '" ', TableDataX += " />" } }), TableDataX += "</dtXml>", jquery_min_p.ajax({ type: "POST", contentType: "application/json; charset=utf-8", url: "/Master/itemaddonsUseCheck", data: "{'TableDataX':'" + TableDataX + "','restroId':'" + restroId + "'}", dataType: "json", async: !1, success: function (result) { var i = 0, jsondata = eval(result); if (result.length > 0) return jquery_min_p("#lblwarning").text("item Already Assigned Cant Be Deleted"), jquery_min_p("#warningpopup").modal("show"), !1; jquery_min_p.ajax({ type: "POST", contentType: "application/json; charset=utf-8", url: "/Master/Deleteaddon", data: "{'TableDataX':'" + TableDataX + "','restroId':'" + restroId + "'}", dataType: "json", async: !1, success: function (result) { var i = 0, jsondata = eval(result); "1" == jsondata[0].result && (jquery_min_p("#popupsuccess").text("Addons deleted  successfully"), jquery_min_p("#savePopup").modal("show")) } }) } }) } function DeselectAlldata(e) { jquery_min_p(".chk").prop("checked", !1); var t = jquery_min_p(e).closest("tr").find("td:nth-child(2)").text().trim(); jquery_min_p(e).prop("checked", !0), restroid = jquery_min_p("#lblrestroid").text(), jquery_min_p.ajax({ type: "POST", contentType: "application/json; charset=utf-8", url: "/Master/BindItemaddons", data: "{'itemId':'" + t + "','restroid':'" + restroid + "'}", dataType: "json", async: !1, success: function (e) { var t = 0, n = ""; for (jquery_min_p(".chkAddon").prop("checked", !1), t = 0; t < e.length; t++) jquery_min_p("#divaddons .chkAddon").each(function (d) { n = $(this).closest("tr td").find("#lbladdonsId").text(), e[t].addonsId == n && jquery_min_p(this).prop("checked", !0) }) } }) } jquery_min_p(document).ready(function () { jquery_min_p("#empDetails").css("display", "block"), restroid = jquery_min_p("#lblrestroid").text(), BindAddOnList(), BindItemWise(), jquery_min_p("#txtinputitem").on("keyup", function () { var e = jquery_min_p(this).val().toLowerCase(); jquery_min_p("#tblitemlist   tr").filter(function () { jquery_min_p(this).toggle($(this).text().toLowerCase().indexOf(e) > -1) }) }), jquery_min_p("#txtinputaddon").on("keyup", function () { var e = jquery_min_p(this).val().toLowerCase(); jquery_min_p("#tbladdonlist  td").filter(function () { jquery_min_p(this).toggle($(this).text().toLowerCase().indexOf(e) > -1) }) }), jquery_min_p("#btnsaveclose").click(function () { jquery_min_p("#savePopup").modal("hide"), BindAddOnList(), BindItemWise() }), jquery_min_p("#btndeladdon").click(function () { var e = 0; if (jquery_min_p("#divaddons .chkAddon").each(function (t) { 1 == jquery_min_p(this).prop("checked") && (e = 1) }), 1 != e) return jquery_min_p("#lblwarning").text("Please Select Addons First"), jquery_min_p("#warningpopup").modal("show"), !1; jquery_min_p("#DeleteAddonepopup").modal("show") }), jquery_min_p("#BtnDelete").click(function () { jquery_min_p("#DeleteAddonepopup").modal("hide"), Deleteaddon() }), jquery_min_p("#BtnNo").click(function () { return jquery_min_p("#DeleteAddonepopup").modal("hide"), !1 }), jquery_min_p("#btnAdd").click(function () { if (!validation()) return !1; CheckDuplicate() }), jquery_min_p("#btnproceed").click(function () { var e = ""; restroid = jquery_min_p("#lblrestroid").text(), jquery_min_p("#Itemtable tbody").find("tr").each(function () { var t = jquery_min_p(this).closest("tr"); 1 == t.find(".chk").prop("checked") && (e = t.find("td:nth-child(2)").text().trim()) }); var t = "<dtXml>"; if ("" != e) { var n = 0; jquery_min_p("#divaddons .chkAddon").each(function (d) { if (1 == jquery_min_p(this).prop("checked")) { n = 1, t += "<dtXml "; var a = $(this).closest("tr td").find("#lbladdonsId").text(); t += 'addonsId="' + a + '" ', t += 'ItemsId="' + e + '" ', t += " />" } }), t += "</dtXml>", 1 == n ? jquery_min_p.ajax({ type: "POST", contentType: "application/json; charset=utf-8", url: "/Master/itemaddonsbinding", data: "{'TableDataX':'" + t + "','restroid':'" + restroid + "'}", dataType: "json", async: !1, success: function (e) { "1" == e[0].result ? (jquery_min_p("#popupsuccess").text("Addons Added To This Item Name Successfully"), jquery_min_p("#savePopup").modal("show"), jquery_min_p("#checkitem").prop("checked", !1), jquery_min_p("#checkAddon").prop("checked", !1)) : alert("Error") }, error: function () { } }) : (jquery_min_p("#lblwarning").text("Please Select Addon Item"), jquery_min_p("#warningpopup").modal("show")) } else jquery_min_p("#lblwarning").text("Please Select Item First"), jquery_min_p("#warningpopup").modal("show") }), jquery_min_p("#btnopenaddonpopup").click(function () { jquery_min_p("#Addonspopup").modal("show"), Reset() }), jquery_min_p("#btnaddonClose").click(function () { jquery_min_p("#addonsavePopup").modal("hide"), Reset() }) });